import java.util.Scanner;

public class SquareRootCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        try {
            System.out.print("Enter a number: ");
            String input = scanner.nextLine();
            double number = Double.parseDouble(input);

            if (number < 0) {
                System.out.println("Error: Cannot calculate the square root of a negative number.");
            } else {
                double result = Math.sqrt(number);
                System.out.println("The square root of " + number + " is " + result);
            }
        } catch (NumberFormatException e) {
            System.out.println("Error: Invalid input. Please enter a valid number.");
        }
    }
}



2)

import java.util.Scanner;

class InvalidPINException extends Exception {
    public InvalidPINException(String message) {
        super(message);
    }
}

class InsufficientBalanceException extends Exception {
    public InsufficientBalanceException(String message) {
        super(message);
    }
}

public class ATMSystem {
    private static final String CORRECT_PIN = "1234";
    private static double balance = 3000.0; // Initial balance

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            System.out.print("Enter PIN: ");
            String enteredPin = scanner.nextLine();
            if (!enteredPin.equals(CORRECT_PIN)) {
                throw new InvalidPINException("Error: Invalid PIN.");
            }

            System.out.print("Withdraw Amount: ");
            double withdrawAmount = scanner.nextDouble();
            if (withdrawAmount > balance) {
                throw new InsufficientBalanceException("Error: Insufficient balance. Current Balance: " + balance);
            }

            // Process withdrawal
            balance -= withdrawAmount;
            System.out.println("Withdrawal successful! Current Balance: " + balance);

        } catch (InvalidPINException e) {
            System.out.println(e.getMessage());
        } catch (InsufficientBalanceException e) {
            System.out.println(e.getMessage());
        } finally {
            System.out.println("Remaining Balance: " + balance);
        }
    }
}


3)

import java.util.HashSet;
import java.util.Set;

class CourseFullException extends Exception {
    public CourseFullException(String message) {
        super(message);
    }
}

class PrerequisiteNotMetException extends Exception {
    public PrerequisiteNotMetException(String message) {
        super(message);
    }
}

class Student {
    private String name;
    private Set<String> completedCourses;

    public Student(String name) {
        this.name = name;
        this.completedCourses = new HashSet<>();
    }

    public void completeCourse(String courseName) {
        completedCourses.add(courseName);
    }

    public boolean hasCompletedPrerequisite(String prerequisite) {
        return completedCourses.contains(prerequisite);
    }

    public String getName() {
        return name;
    }
}

class Course {
    private String courseName;
    private int maxEnrollment;
    private int currentEnrollment;
    private String prerequisite;

    public Course(String courseName, int maxEnrollment, String prerequisite) {
        this.courseName = courseName;
        this.maxEnrollment = maxEnrollment;
        this.currentEnrollment = 0;
        this.prerequisite = prerequisite;
    }

    public String getCourseName() {
        return courseName;
    }

    public boolean isFull() {
        return currentEnrollment >= maxEnrollment;
    }

    public void enroll(Student student) throws CourseFullException, PrerequisiteNotMetException {
        if (isFull()) {
            throw new CourseFullException("Error: Course " + courseName + " is full.");
        }
        if (!student.hasCompletedPrerequisite(prerequisite)) {
            throw new PrerequisiteNotMetException("Error: Prerequisite not met for " + courseName + ". Complete " + prerequisite + " before enrolling.");
        }

        currentEnrollment++;
        System.out.println(student.getName() + " enrolled in " + courseName + ".");
    }
}

public class UniversityEnrollmentSystem {
    public static void main(String[] args) {
        Student student = new Student("Alice");
        student.completeCourse("Core Java"); // Alice has completed "Core Java"

        Course course1 = new Course("Advanced Java", 2, "Core Java");

        try {
            // Attempt to enroll in Advanced Java without prerequisite
            course1.enroll(student);

            // Alice completes prerequisite for Advanced Java
            student.completeCourse("Core Java");

            // Attempt to enroll in Advanced Java again
            course1.enroll(student);

        } catch (CourseFullException e) {
            System.out.println(e.getMessage());
        } catch (PrerequisiteNotMetException e) {
            System.out.println(e.getMessage());
        }
    }
}
